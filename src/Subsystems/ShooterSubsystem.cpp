// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"
#include <CANSpeedController.h>
#include <SmartDashboard/SmartDashboard.h>
#include <Math.h>
#include "ShooterSubsystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ShooterSubsystem::ShooterSubsystem() : Subsystem("ShooterSubsystem") {
	rpm1=2350;
	rpm2=1950;
	init1=rpm1;
	init2=rpm2;
	percentDiff=100*rpm2/rpm1;


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonController = RobotMap::shooterSubsystemtalonController;
    talonController2 = RobotMap::shooterSubsystemtalonController2;
    feederMotor = RobotMap::shooterSubsystemfeederMotor;
    augerMotor = RobotMap::shooterSubsystemaugerMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void ShooterSubsystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ShooterSubsystem::TurnOnThrottle(){
	talonController->Enable();
	talonController2->Enable();
	talonController->SetControlMode(frc::CANSpeedController::ControlMode::kPercentVbus);
	talonController2->SetControlMode(frc::CANSpeedController::ControlMode::kPercentVbus);
	talonController->Set(.82);	//.82good
	talonController2->Set(.64);	//.64good
}
void ShooterSubsystem::TurnOnRPM(){
	talonController->Enable();
	talonController2->Enable();

	talonController->SetControlMode(frc::CANSpeedController::ControlMode::kSpeed);
	talonController->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
	talonController->ConfigNominalOutputVoltage(+0.0f, -0.0f);
	talonController->ConfigPeakOutputVoltage(+12.0f, -12.0f);
	talonController->SetSensorDirection(false);

	talonController2->SetControlMode(frc::CANSpeedController::ControlMode::kSpeed);
	talonController2->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
	talonController2->ConfigNominalOutputVoltage(+0.0f, -0.0f);
	talonController2->ConfigPeakOutputVoltage(+12.0f, -12.0f);
	talonController2->SetSensorDirection(true);

	//we'll put optimized values here eventually
	double p = .1;
	double i = 0;	//was 0
	double d = 1.75;	//was 1.75
	double f = .042;
	double f2 = .048;
	int izone = 0;
	double ramprate = 2;
	int profile = 0;

	talonController->SelectProfileSlot(profile);
	talonController->SetPID(p, i, d, f);
	talonController->SetIzone(izone);
	talonController->SetCloseLoopRampRate(ramprate);
	talonController->Set(rpm1);

	talonController2->SelectProfileSlot(profile);
	talonController2->SetPID(p, i, d, f2);
	talonController2->SetIzone(izone);
	talonController2->SetCloseLoopRampRate(ramprate);
	talonController2->Set(rpm2);
}

void ShooterSubsystem::TurnOff(){
	talonController->Disable();
	talonController2->Disable();
	feederMotor->Disable();
	augerMotor->Disable();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void ShooterSubsystem::PrintValues(){
	std::string cannon1= "CSpd1: "+std::to_string(rint(talonController->GetSpeed()));
	std::string cannon2= "CSpd2: "+std::to_string(rint(talonController2->GetSpeed()));
	//char buffer [50];
	//std::string c1 = sprintf(buffer, "cSpd1: %d",rint(talonController->GetSpeed()));
	//printf("RPM1=%f E1=%i RPM2=%f E2=%i \n",talonController->GetSpeed(),talonController->GetClosedLoopError(),talonController2->GetSpeed(),talonController2->GetClosedLoopError());
	frc::SmartDashboard::PutString("DB/String 8", cannon1);
	frc::SmartDashboard::PutString("DB/String 9", cannon2);
}

void ShooterSubsystem::TurnOnFeederMotor(){
	feederMotor->Set(.3);	//?prevents sideways spin?
	augerMotor->Set(-.5);

}

void ShooterSubsystem::increaseRPM(){
	rpm1+=100;
	rpm2=percentDiff*rpm1/100;
	//std::cout<< "increase values " << rpm1 << " "<< rpm2 <<"\n";
}

void ShooterSubsystem::decreaseRPM(){
	rpm1-=100;
	rpm2=percentDiff*rpm1/100;
	//std::cout<< "decrease values " << rpm1 << " " << rpm2 <<"\n";
}

void ShooterSubsystem::returnOriginalRPM(){
	rpm1=init1;
	rpm2=init2;
}



