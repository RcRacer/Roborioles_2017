// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoTurn.h"
#include "../Subsystems/DriveBase.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoTurn::AutoTurn(double speed, double angle): Command() {
    m_speed = speed;
    m_angle = angle;
    finished = false;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoTurn::Initialize() {
	SetTimeout(2);
	Robot::driveBase->SetExp();
	printf("yo we turning up the beat");
}

// Called repeatedly when this Command is scheduled to run
void AutoTurn::Execute() {
	SmartDashboard::PutNumber("Left Motor .3 shoved left", -m_speed-(Robot::driveBase->getGAngle()*0.01));
	SmartDashboard::PutNumber("Right Motor Speed shoved left", m_speed+(Robot::driveBase->getGAngle()*0.01));
	SmartDashboard::PutNumber("Left Motor Speed shoved right", -m_speed+(Robot::driveBase->getGAngle()*0.01));
	SmartDashboard::PutNumber("Right Motor Speed shoved right", m_speed-(Robot::driveBase->getGAngle()*0.01));
	SmartDashboard::PutNumber("Gyro Position", Robot::driveBase->getGAngle());
	if (m_angle > 0) {
		if (Robot::driveBase->getGAngle() < m_angle){
			Robot::driveBase->BetterDriveMethod(m_speed,-m_speed);
		} else {
			Robot::driveBase->driveMethod(0,0);
			finished = true;
		}
	} else if (m_angle < 0) {
		if (Robot::driveBase->getGAngle() > m_angle){
			Robot::driveBase->BetterDriveMethod(-m_speed,m_speed);
		} else {
			Robot::driveBase->driveMethod(0,0);
			finished = true;
		}
	}

}

// Make this return true when this Command no longer needs to run execute()
bool AutoTurn::IsFinished() {
	if ((finished && abs(Robot::driveBase->GetMomentum())<=0.00005)|| IsTimedOut() || Robot::intrpt)
		return true;
	else
		return false;
}

// Called once after isFinished returns true
void AutoTurn::End() {
	Robot::driveBase->driveMethod(0,0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoTurn::Interrupted() {
	Robot::driveBase->driveMethod(0,0);

}
